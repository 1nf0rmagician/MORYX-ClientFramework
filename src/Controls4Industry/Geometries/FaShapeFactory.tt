<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Linq" #>
<#@ assembly Name="Microsoft.CSharp, Version=4.0.0.0, Culture=neutral" #>
<#@ assembly name="$(SolutionDir)packages\Newtonsoft.Json.12.0.3\lib\net45\Newtonsoft.Json.dll" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Globalization" #>
<#@ output extension=".cs" #>
using System.Collections.Generic;
using System.Windows.Media;
<#
var currentPath = Host.ResolvePath(string.Empty);
var jsonFile = Path.Combine(currentPath, "fontawesome-5.12.1.json");
dynamic icons = JObject.Parse(File.ReadAllText(jsonFile));
string GetName(string iconName, string iconGroup)
{
    var name = $"{iconName} {iconGroup}".Replace('-', ' ');
    var textInfo = CultureInfo.CurrentCulture.TextInfo;
    return textInfo.ToTitleCase(name).Replace(' ', '_');
}
#>

namespace C4I
{
    public enum FaShapeType
    {
<#
foreach (dynamic icon in icons)
{
    foreach (dynamic svg in icon.Value.svg)
    {
        if (svg.Name == "brands") continue;
#>
        <#= GetName(icon.Name, svg.Name) #>,
<#
    }
}
#>
    }

    /// <summary>
    /// Factory that creates all <see cref="FaShapeType"/> icons
    /// </summary>
    public static class FaShapeFactory
    {
        private static readonly Dictionary<FaShapeType, string> FaGeometries = new Dictionary<FaShapeType, string>();

        static FaShapeFactory()
        {
<#
foreach (dynamic icon in icons)
{
    foreach (dynamic svg in icon.Value.svg)
    {
        if (svg.Name == "brands") continue;
#>
            FaGeometries.Add(FaShapeType.<#=GetName(icon.Name, svg.Name)#>, "<#= svg.Value.path #>");
<#
    }
}
#>
        }

        /// <summary>
        /// Creates the icon by given <see cref="FaShapeType"/>
        /// </summary>
        public static Geometry GetShapeGeometry(FaShapeType shapeType)
        {
            return !FaGeometries.ContainsKey(shapeType) ? null : Geometry.Parse(FaGeometries[shapeType]);
        }
    }
}